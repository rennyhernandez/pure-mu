(function(){
  var app = angular.module('pureApp',[]);
  app.controller("MainController", ['$scope','$http', '$window', function($scope, $http, $window){
      var env = this;
      $http.defaults.headers.post["Content-Type"] = "application/x-www-form-urlencoded";
      this.messages = [];
      env.ciphertext;
      env.user;
      env.logged = "#{rawJS $ loggedUsername}"
      env.destinationPublicKey; 
      env.pkint;
      env.now;
      env.foundUser = false;
      env.message;
      
      // Gets user information from server
      this.getUserInfo = function(){
               $http.get('http://localhost:3000/api/user/fullinfo/' + $scope.to).success(function(data){                 
               env.user = data
               env.foundUser = true;
       });
      };
      
      //Sends an encrypted message
      this.saveMessage = function(){ 
        envsave = this;       
        if (!env.user) // env.user is undefined (not fetched before using getUserInfo);
          {
            $scope.to = $window.to; 
            $http.get('http://localhost:3000/api/user/fullinfo/' + $scope.to).success(function(data){                 
              env.user = data;
              env.foundUser = true;
              env.user;
              env.now = Date.now();
              env.message = { 
                            to: env.user.login,
                            from: env.logged, //TODO: change value with username in session
                            body: $scope.body,                             
                            createdAt: this.now
                          }
              this.toAuth;
          });
        }
        else 
        {
              env.foundUser = true;
              this.user;
              this.now = Date.now();
              env.message = { 
                            to: env.user.login,
                            from: env.logged, //TODO: change value with username in session
                            body: $scope.body,                             
                            createdAt: this.now
                          }
              this.toAuth;

          }                              
          // Get destination public key
          $http.get('http://localhost:3000/api/publickey/' + env.user.login).success(function(data){                        
            //Retrieve public_n value, decode it from Base64 and create a new BigInt             
            var jsn = forge.util.decode64(data.public_n);
            var exponent = new forge.jsbn.BigInteger(data.public_e.toString(), 10);
            var public_n = new forge.jsbn.BigInteger(jsn, 10);
            //Recreate Public Key 
            var destinationPublicKey = forge.pki.setRsaPublicKey(public_n, exponent);
            //encrypt message ... 
            env.ciphertext = destinationPublicKey.encrypt(forge.util.createBuffer(env.message.body).getBytes());
            env.ciphertext64 = forge.util.encode64(env.ciphertext);
            $http.get('http://localhost:3000/api/privatekey/' + env.logged).success(function(pkData){
              //TODO:... then, sign. 
              // Save message
              env.toAuth = env.ciphertext + "+" +  env.message.to + "+" + env.message.from + "+" + env.message.createdAt;
                    
              var exponent = new forge.jsbn.BigInteger( pkData.private_pub.public_e.toString(), 10);
              var private_d = new forge.jsbn.BigInteger(forge.util.decode64(pkData.private_d), 10);
              var public_n = new forge.jsbn.BigInteger(forge.util.decode64(pkData.private_pub.public_n), 10);        
              var private_key = forge.pki.setRsaPrivateKey(public_n, exponent, private_d);
              
              var public_key = forge.pki.setRsaPublicKey(public_n, exponent);
              console.log(public_key);
              console.log(env.message.body);
              var copy = public_key.encrypt(forge.util.createBuffer(env.message.body).getBytes());
              var copy64 = forge.util.encode64(copy);
              
              this.datapacket = {
                       to: env.user.login,
                       from: env.logged, //TODO: change value with username in session
                       body: env.ciphertext64,
                       copy: copy64,
                       createdAt: env.message.createdAt,
                       authMessage: env.toAuth //TODO: Authenticate this string
              };
              $http.post('http://localhost:3000/api/message/send', this.datapacket).
                then(function(data, status, headers, config) {
                  console.log(pkData);
                  env.messages.push(env.message);
                  $scope.body = $scope.to = null;
                  env.foundUser = false;
                  $window.location.assign("http://localhost:3000/messages");
              });
          });  
        }); 
      };
      // Returns true or false whether user is found 
      this.userIsFound = function() {
        return(this.foundUser);
      };      
  }]);
  
app.controller("DecryptController", ['$scope', '$http', function($scope, $http){
  var env = this;
  env.user;
  env.loggedUser = "#{rawJS $ loggedUsername}"
  console.log(env.loggedUser);
  this.password;
  this.decryptMessage = function(){
    console.log($(".message").html());
  };
  
  this.isChanging = function(){
    var messages = $(".message");

    if($scope.password == "cambiame"){
      $http.get('http://localhost:3000/api/privatekey/' + env.loggedUser).success(function(data){
      
      
        var exponent = data.private_pub.public_e;
        var private_d = new forge.jsbn.BigInteger(forge.util.decode64(data.private_d), 10);
        var public_n = new forge.jsbn.BigInteger(forge.util.decode64(data.private_pub.public_n), 10);
        
        var private_key = forge.pki.setRsaPrivateKey(public_n, exponent, private_d);
        
        messages.each(function(){
          var ciphertext = forge.util.decode64($(this).html());
          var deciphered = private_key.decrypt(ciphertext);
          $(this).text(deciphered);
        });
      });
 
    }
   
  };
}]);
    
    
})();

